- name: Create a k8s app-tier namespace
  k8s:
    name: app
    api_version: v1
    kind: Namespace
    state: present


- name: Delete helm chart | kubeless
  shell: helm delete --purge kubeless
  ignore_errors: true


- name: Install helm chart | kubeless
  shell: helm install --namespace kubeless incubator/kubeless
  ignore_errors: true
    

- name: Create a socservice object from an inline definition
  k8s:
    state: present
    definition:
      apiVersion: extensions/v1beta1
      kind: Deployment
      metadata:
        name: socservice
        namespace: app
        labels:
          run: socservice
      spec:
        replicas: 1
        selector:
          matchLabels:
            run: socservice
        template:
          metadata:
            labels:
              run: socservice
          spec:
            #nodeSelector:
            #  disktype: ssd
            volumes:
              - name: env
                configMap:
                  name: env
              # token from the cluster, must already exist
              # and match the name of the volume using in container
              - name: kubeconfig
                configMap:
                  name: kubeconfig
              #- name: 'slack-integrations'
              #  configMap:
              #    name: 'slack-integrations'
            restartPolicy: Always
            # ClusterFirst, Default
            dnsPolicy: ClusterFirst
            #hostNetwork: true
            imagePullSecrets:
              - name: registrykey
            #terminationGracePeriodSeconds: 30
            containers:
              - image: "us.gcr.io/bits/socservice:dev"
                imagePullPolicy: Always
                securityContext:
                  privileged: true
                #livenessProbe:
                #  httpGet:
                #    path: /version
                #    port: 2379
                #    scheme: HTTP
                #  initialDelaySeconds: 30
                #  timeoutSeconds: 5
                name: socservice
                ports:
                  - containerPort: 80
                    # hostPort: 8080
                    protocol: TCP
                command: []
                args: []
                volumeMounts:
                  # name must match the volume name below
                  - name: kubeconfig
                    mountPath: /.kube
                  #- name: 'slack-integrations'
                  #  mountPath: '/etc/slack'
                  #  readOnly: true
                #lifecycle:
                #  postStart:
                #    exec:
                #      command:
                #        - '/bin/bash'
                #        - '/opt/env/slack-webhook.sh'
                #        - 'start'
                #  preStop:
                #    exec:
                #      command:
                #        - '/bin/bash'
                #        - '/opt/env/slack-webhook.sh'
                #        - 'stop'
                env:
                  - name: KUBECONFIG
                    value: /.kube/config
                  - name: POD_NAME
                    valueFrom:
                      fieldRef:
                        fieldPath: metadata.name
                  - name: POD_NAMESPACE
                    valueFrom:
                      fieldRef:
                        fieldPath: metadata.namespace
                  - name: POD_IP
                    valueFrom:
                      fieldRef:
                        fieldPath: status.podIP
                  - name: BACKEND_MYSQL_PORT
                    value: "3306"
                  - name: BACKEND_MYSQL_HOST
                    value: mysql.data.svc.cluster.local
                  - name: PORT
                    value: "8080"
                  - name: SERVICE_NAME
                    value: "app/socservice"


- name: Create a socservice service from an inline definition
  k8s:
    state: present
    definition:
      apiVersion: autoscaling/v1
      kind: HorizontalPodAutoscaler
      metadata:
        name: socservice
        namespace: app
      spec:
        maxReplicas: 2
        minReplicas: 1
        scaleTargetRef:
          apiVersion: v1
          kind: ReplicationController
          name: socservice
        targetCPUUtilizationPercentage: 80


- name: Create a socservice service from an inline definition
  k8s:
    state: present
    definition:
      kind: Service
      apiVersion: v1
      metadata:
        name: socservice
        namespace: app
        annotations:
          app_env: dev
          description: API
      spec:
        selector:
          run: socservice
        # ClusterIP, NodePort, LoadBalancer
        type: LoadBalancer
        sessionAffinity: None
        ports:
          - targetPort: 80
            port: 80
            protocol: TCP
            name: socservice
